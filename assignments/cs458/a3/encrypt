#!/usr/bin/env python2
import base64
import sys

# import requests


URL = 'http://localhost:4555'


def main(plaintext):
    padding = bytearray(list(range(15, 0, -1)) + [16])

    plaintexts = [ord(x) for x in plaintext]
    plaintexts = [bytearray(plaintexts[i:i+16])
                  for i in range(0, len(plaintexts), 16)]
    if len(plaintexts[-1]) != 16:
        pad = padding[len(plaintexts)-1:]
        plaintexts[-1].extend(pad)
        plaintexts[-1][-1] = len(pad)

    cookies = bytearray(16 * (len(plaintexts) + 1))
    # cookies = bytearray(16 * len(plaintexts)) + bytearray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])
    cookies = [cookies[i:i+16] for i in range(0, len(cookies), 16)]

    for idx in range(len(plaintexts) - 1, -1, -1):
        # intermediary = bytearray(16)

        # for i in range(15, -1, -1):
        #     code = 500
        #     while code != 200:
        #         intermediary[i] += 1
        #         if intermediary[i] > 255:
        #             print 'ERROR: exceeded bounds of index {}'.format(i)
        #             print ''.join('{:02x}'.format(x) for x in intermediary)
        #             return

        #         test_cookie = base64.b64encode(intermediary + cookies[idx + 1])

        #         resp = requests.get(URL, cookies={'user': test_cookie})
        #         code = resp.status_code

        #     if i:
        #         intermediary[-1] ^= (16 - i) ^ (16 - i + 1)

        # intermediate = bytearray(x ^ y for x, y in zip(intermediary,
        #                                                cookies[idx + 1]))

        # Woot, hardcoding a brute-forced value!
        intermediate = bytearray([109, 248, 217, 16, 189, 210, 101, 14, 249, 188, 137, 166, 173, 204, 51, 146])

        for i in range(15, -1, -1):
            cookies[idx][i] = intermediate[i] ^ plaintexts[idx][i]

    return base64.b64encode(''.join([chr(x) for c in cookies for x in c]))


if __name__ == '__main__':
    try:
        encoded = main(sys.argv[1])
    except IndexError:
        print 'usage: ./encrypt <plaintext>'
        sys.exit(1)

    print encoded
